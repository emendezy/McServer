AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-mc-server

  Sample SAM Template for sam-mc-server

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    CodeUri: lambdas/
    Timeout: 300  # 6 minutes (shouldn't need this long but to be safe)
    MemorySize: 128
    Runtime: python3.9
    Architectures:
      - x86_64

Parameters:
  MinecraftKeyPairName:
    Type: String
    Default: MinecraftServerKeyPair
  SSHPort:
    Type: String
    Default: "22"
  MinecraftServerPort:
    Type: String
    Default: "25565"
  UriStageName:
    Type: String
    Default: "gang"

Resources:
  # EC2
  MinecraftServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 'ami-0c94855ba95c71c99' # Amazon Linux AMI 2 x86
      InstanceType: t2.small
      KeyName: !Ref MinecraftKeyPairName
      Tags:
        - Key: "Name"
          Value: "minecraft_server"
        - Key: "Costcenter"
          Value: "minecraft"
      SecurityGroups:
        - !Ref MinecraftServerSecurityGroup
        - !Ref SSHSecurityGroup

  # Security Groups
  MinecraftServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Minecraft server connection
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref MinecraftServerPort
          ToPort: !Ref MinecraftServerPort
          CidrIp: 0.0.0.0/0

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH entry point
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SSHPort
          ToPort: !Ref SSHPort
          CidrIp: 0.0.0.0/0

  # Lambdas
  StartMyServerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: start_mc.handler
      Role: !GetAtt LambdaEC2Role.Arn
      Events:
        StartMcServerApiEvent:
          Type: Api
          Properties:
            Path: /start-mc-server
            Method: post
            RestApiId: !Ref StartMcServerAPIGateway
      Environment:
        Variables:
          INSTANCE_ID: !Ref MinecraftServer

  StopMyServerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: stop_mc.handler
      Role: !GetAtt LambdaEC2Role.Arn
      Environment:
        Variables:
          INSTANCE_ID: !Ref MinecraftServer
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 1,7,13,19 * * ? *) # Trigger at hours 1, 7, 13, 19 in utc tz of a 24 hr day

  # API Gateway
  StartMcServerAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref UriStageName
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "AWS Minecraft Server API"
        paths:
          /start-mc-server:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartMyServerLambda.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
                x-amazon-apigateway-cors:
                  allowOrigins:
                    - "*"
                  allowMethods:
                    - POST
                  allowHeaders:
                    - "*"
              responses: {}
              consumes:
                - "application/json"
              produces:
                - "application/json"

  # Roles
  LambdaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaEC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                Resource: "*"
        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
